package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"

	"github.com/nethish/experiments/graphql/graph/model"
)

var (
	Database map[string]*model.Person
	id       = 0
)

// CreatePerson is the resolver for the createPerson field.
func (r *mutationResolver) CreatePerson(ctx context.Context, name string, age int32, email *string) (*model.Person, error) {
	id++
	Database[string(id)] = &model.Person{
		ID:    string(id),
		Name:  name,
		Age:   age,
		Email: email,
	}

	return Database[string(id)], nil
}

// UpdatePerson is the resolver for the updatePerson field.
func (r *mutationResolver) UpdatePerson(ctx context.Context, id string, name *string, age *int32, email *string) (*model.Person, error) {
	Database[id] = &model.Person{
		ID:    string(id),
		Name:  *name,
		Age:   *age,
		Email: email,
	}

	return Database[id], nil
}

// DeletePerson is the resolver for the deletePerson field.
func (r *mutationResolver) DeletePerson(ctx context.Context, id string) (bool, error) {
	delete(Database, id)
	return true, nil
}

// Person is the resolver for the person field.
func (r *queryResolver) Person(ctx context.Context, id string) (*model.Person, error) {
	return Database[id], nil
}

// People is the resolver for the people field.
func (r *queryResolver) People(ctx context.Context) ([]*model.Person, error) {
	persons := []*model.Person{}

	for _, value := range Database {
		persons = append(persons, value)
	}

	return persons, nil
}

// AnotherPerson is the resolver for the anotherPerson field.
func (r *queryResolver) AnotherPerson(ctx context.Context, id string) (*model.AnotherPerson, error) {
	panic(fmt.Errorf("not implemented: AnotherPerson - anotherPerson"))
}

// PersonCreated is the resolver for the personCreated field.
func (r *subscriptionResolver) PersonCreated(ctx context.Context) (<-chan *model.Person, error) {
	c := make(chan *model.Person)
	c <- Database[string(id)]
	return c, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type (
	mutationResolver     struct{ *Resolver }
	queryResolver        struct{ *Resolver }
	subscriptionResolver struct{ *Resolver }
)
