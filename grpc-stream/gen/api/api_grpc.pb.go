// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_ListUsers_FullMethodName     = "/api.UserService/ListUsers"
	UserService_CreateUsers_FullMethodName   = "/api.UserService/CreateUsers"
	UserService_ChatWithUsers_FullMethodName = "/api.UserService/ChatWithUsers"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// Server streaming: send a request, receive a stream of users
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (UserService_ListUsersClient, error)
	// Client streaming: send a stream of users, get a summary response
	CreateUsers(ctx context.Context, opts ...grpc.CallOption) (UserService_CreateUsersClient, error)
	// Bidirectional streaming: both sides send messages
	ChatWithUsers(ctx context.Context, opts ...grpc.CallOption) (UserService_ChatWithUsersClient, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (UserService_ListUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], UserService_ListUsers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceListUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_ListUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type userServiceListUsersClient struct {
	grpc.ClientStream
}

func (x *userServiceListUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) CreateUsers(ctx context.Context, opts ...grpc.CallOption) (UserService_CreateUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[1], UserService_CreateUsers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceCreateUsersClient{stream}
	return x, nil
}

type UserService_CreateUsersClient interface {
	Send(*CreateUserRequest) error
	CloseAndRecv() (*CreateUsersResponse, error)
	grpc.ClientStream
}

type userServiceCreateUsersClient struct {
	grpc.ClientStream
}

func (x *userServiceCreateUsersClient) Send(m *CreateUserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceCreateUsersClient) CloseAndRecv() (*CreateUsersResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateUsersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) ChatWithUsers(ctx context.Context, opts ...grpc.CallOption) (UserService_ChatWithUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[2], UserService_ChatWithUsers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceChatWithUsersClient{stream}
	return x, nil
}

type UserService_ChatWithUsersClient interface {
	Send(*UserChatMessage) error
	Recv() (*UserChatMessage, error)
	grpc.ClientStream
}

type userServiceChatWithUsersClient struct {
	grpc.ClientStream
}

func (x *userServiceChatWithUsersClient) Send(m *UserChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceChatWithUsersClient) Recv() (*UserChatMessage, error) {
	m := new(UserChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// Server streaming: send a request, receive a stream of users
	ListUsers(*ListUsersRequest, UserService_ListUsersServer) error
	// Client streaming: send a stream of users, get a summary response
	CreateUsers(UserService_CreateUsersServer) error
	// Bidirectional streaming: both sides send messages
	ChatWithUsers(UserService_ChatWithUsersServer) error
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) ListUsers(*ListUsersRequest, UserService_ListUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedUserServiceServer) CreateUsers(UserService_CreateUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateUsers not implemented")
}
func (UnimplementedUserServiceServer) ChatWithUsers(UserService_ChatWithUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatWithUsers not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_ListUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).ListUsers(m, &userServiceListUsersServer{stream})
}

type UserService_ListUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type userServiceListUsersServer struct {
	grpc.ServerStream
}

func (x *userServiceListUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_CreateUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).CreateUsers(&userServiceCreateUsersServer{stream})
}

type UserService_CreateUsersServer interface {
	SendAndClose(*CreateUsersResponse) error
	Recv() (*CreateUserRequest, error)
	grpc.ServerStream
}

type userServiceCreateUsersServer struct {
	grpc.ServerStream
}

func (x *userServiceCreateUsersServer) SendAndClose(m *CreateUsersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceCreateUsersServer) Recv() (*CreateUserRequest, error) {
	m := new(CreateUserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_ChatWithUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).ChatWithUsers(&userServiceChatWithUsersServer{stream})
}

type UserService_ChatWithUsersServer interface {
	Send(*UserChatMessage) error
	Recv() (*UserChatMessage, error)
	grpc.ServerStream
}

type userServiceChatWithUsersServer struct {
	grpc.ServerStream
}

func (x *userServiceChatWithUsersServer) Send(m *UserChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceChatWithUsersServer) Recv() (*UserChatMessage, error) {
	m := new(UserChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListUsers",
			Handler:       _UserService_ListUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateUsers",
			Handler:       _UserService_CreateUsers_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ChatWithUsers",
			Handler:       _UserService_ChatWithUsers_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
